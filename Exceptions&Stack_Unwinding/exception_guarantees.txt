Exception Guarantees
--------------------

1) No throw guarantee: Operation will not throw. Ex:

C functions such as fclose can't throw.
std::swap(a,b)
All destructors of classes are implicitly no throw according to modern C++
Move ctor and move assigment operator are desired to be no except since they facilitate compiler to do make optimization(code selection in compile time)

2) Basic guarantee: If operation throws, no resource is leaked. Object invariants are not corrupted, but operation can be half done. Ex:

std::vector::push_back(a); // either element will be added or not.

3) Strong guarantee(commit or rollback): Basic guarantee + operation will either succeed or be rolled back. Ex:

void halfDoneCopy(const std::vector<A>& in, std::vector<A>& out) // if copy ctor will throw, only some elements will be copied
{
	for(const auto& a : in)
	{
		out,push_back(a);
	}
}

4) No exception safety: If operation throews exceptions bad thing may happen. Segfaults, memory corruption etc. Ex:

void char* noSafety(const A& a)
{
	char* buffer = new char[100]; / if fill() will throw we have a memory leak
	a->fill(buffer);
	return buffer;
}

