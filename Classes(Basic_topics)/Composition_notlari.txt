COMPOSITION(CONTAINMENT)
--------------------------------

Composition bir sınıfın başka bir sınıf türünden elemana sahip olması demektir. Nested type'tan farkları vardır. Nested type, sınıfın tanımının başka
bir sınıf içinde bulunması durumunu anlatır. Composition ile ilgli temel olarak bilinmesi gerekenler(Member - sahip olunan, Owner - sahip olan sınıf):

1) Member arayüzü Owner arayüzüne direkt olarak eklenmez, ancak sahip olunan nesne yoluyla kendi fonksiyonları içinde çağırılabilir.

class Member
{
public:
	void foo(){};
	Member() = default;
	Member(int,int,int){};
	
private:
	void bar(){};
};


class Owner
{
public:
	foo();// sentaks hatası
	void fun()
	{
		void foo(); // geçerli
		void bar(); // sentaks hatası, private
	}
private:
	Member mx;
	Member(3,5,7)
	
};

2) Owner, Member'ın private elemanlarına erişemez. Fakat friend bildirimiyle erişime izin verilebilir.

3) Derleyicinin Owner için yazdığı özel üye fonksiyonlar(special member functions), Member'a direkt olarak aktarılır. Yani Owner'da ne çağırılıyorsa
Member'da da o şekilde çağırılır(Rule of zero)

Owner							Member
------------					----------
Default ctor	------->		Default ctor
Copy ctor     	------->		Copy ctor
Move ctor     	------->		Default ctor
Copy assign.    ------->		Copy assign.
Move assign.    ------->		Move assign.
Dtor		    ------->		Dtor


Class A, B, C;

class Myclass
{
public:
	Myclass() : ax(), bx(), cx() {};
	Myclass(const Myclass& rhs) : ax(rhs.ax), bx(rhs.bx), cx(rhs.cx) {};
	Myclass(Myclass&&) : ax(std::move(rhs.ax)), bx(std::move(rhs.bx)), cx(std::move(rhs.cx)) {};
	
	Myclass& operator=(const Myclass& rhs) 
	{
		ax = rhs.ax;
		bx = rhs.bx;
		cx = rhs.cx;
		
		return *this;
	}
	
		Myclass& operator=(Myclass&& rhs) 
	{
		ax = std::move(rhs.ax);
		bx = std::move(rhs.bx);
		cx = std::move(rhs.cx);
		
		return *this;
	}
	
private:
	A ax;
	B bx;
	C cx;
	
};

4) Programcı Owner copy ctor ve move ctor'u kendi yazıyorsa, Member'ın hangi ctor'unun çağırlacağına karar veren kodu kendisi yazmalıdır.
Benzer durum atama operatör fonksiyonları için de geçerlidir.

class Member
{
public:
	Member()
	{
		cout << "Member()\n";
	}

	Member(const Member& rhs)
	{
		cout << "Member(const Member& rhs)\n";
	}

	Member(Member&&)
	{
		cout << "Member(Member&&)\n";
	}
};

class Owner
{
public:
	Owner() = default;
	Owner(const Owner& rhs) : ival(rhs.ival)/*, mx(rhs.mx) */ {} // Owner copy ctor calls Member default ctor - not usually desired, uncommenting between /*..*/ will do proper coding
	Owner(Owner&&) : ival(std::move(ival))/*, mx(rhs.std::move(mx)) */ {} // Owner move ctor calls Member default ctor - not usually desired, uncommenting between /*..*/ will do proper coding

	Owner& operator=(const Owner& rhs)
	{
		ival = rhs.ival;
		//mx = rhs.mx; // programmer should add this line and also copy ctor of Member class, if s/he intents to write copy ctor of Owner

		return *this;
	}


private:
	int ival;
	Member mx;
};

// test code
int main()
{
	Owner o1{};
	Owner o2 = o1;
	Owner o3 = std::move(o1);
}