Const keyword
--------------

const int x = 5;

Can x be used where the code requires constant expression, for example as a case label or for indicating array size?

In C language the answer is no, in C++: if x is initialized by a constant expression, then yes.

Ex:

const int x = 5;

int y = x + 4;

int a[x]; // ok
int b[y]; // error, y is not a constant expression

Constexpr keyword
------------------

- A constexpr variable can only be initialized by a constant expressions.

constexpr int x = 10; // x's type is const int

Ex:
int main()
{
	int i{};
	const int ci{};
	constexpr int cxi = 5;

	std::cout << boolalpha << is_same_v<decltype(i), decltype(ci)> << '\n';
	std::cout << boolalpha << is_same_v<decltype(ci), decltype(cxi)> << '\n';
}

Output
------
false
true

- Compiler may not allocate storage for x due to optimization reasons. However in some situations it will:

auto p = x;

- Aggregate types can also be constexpr:

constexpr int arr[] = {1,3,5,7,9};

constexpr int x = arr[1] + arr[3] + 6;

- constexpr variables are implicitly const. 

Ex1:

constexpr int x = 10;

x = 5; // error

Ex2:

int g = 7;

int main()
{
	constexpr int* p1 = &g; // p1 is const

	*p1 = 10; // ok
	p1 = nullptr; // error

	constexpr const int* p2 = &g; // p2 and also the type it points to is const
	*p2 = 20; // error
}

Constexpr Functions
--------------------
Every function cannot be a constexpr function, here are some restrictions about a function that is to be qualified as constexpr:

1) Cannot have static variables,
2) the type of return expression, paramaters and local variables should be literal type.

The main feature of constexpr functions: if the return type, types of passed arguments and local variables are literal type than return value can be obtained at compile time.

Since compiler can generate return values of constexpr functions in compile time, they will require less operations during run time.

There are various optimizations in C++
---------------------------------------
1) Compiler optimizations(compilers may have different abilities and can be customized with optimization switches). 
	Compiler optimizations can be divided into two categories:
		a) Reorganizing the source code to generate a more effective assembly code without changing the observable behavior(such as inline expansion, modifying the loops, dead code elimination etc.)
		b) Compiler can write code for the programmer(templates)
	
2) Link-time optimizations(LTO)
3) Processor optimizations(branch prediction, changing the order of operations etc.)

 
  
  
