In C++ syntax an R value reference can be const( ex: const Myclass&&) but it doesn't have any usage semantically. In move members, argument that will be moved from, will change
naturally such as making its pointer null or changing its size, however a const reference function parameter doesn't allow this. Ex:

class Myclass
{
public:
    Myclass() = default;
    Myclass(const Myclass&) = default;

    Myclass& operator=(const Myclass&)
    {
        std::cout << "operator=(const Myclass&)\n";
        return *this;
    }

    Myclass& operator=(Myclass&&)
    {
        std::cout << "operator=(Myclass&&)\n";
        return *this;
    }
};

// Let's recall some function overloading rules
void func(Myclass&&) { std::cout << "Myclass&&\n"; }
void func(const Myclass&&) { std::cout << "const Myclass&&\n"; }
void func(Myclass&) { std::cout << "Myclass&\n"; }
void func(const Myclass&) { std::cout << "const Myclass&\n"; }

Myclass foo()
{
    Myclass x;
    return x;
}

const Myclass const_foo() // return type is const, thus blocks move members according to function overloading rules
{                         // never qualify return type with const !!!
    Myclass x;
    return x;
}

int main()
{
    Myclass m;
    const Myclass cm;

    func(m);
    func(cm);

    func(std::move(m));
    func(std::move(cm));

    std::cout << "\n";

    m = foo();         // calls move assignment
    m = const_foo();   // calls copy assignment
}

Output:
-------
Myclass&
const Myclass&
Myclass&&
const Myclass&&

operator=(Myclass&&)
operator=(const Myclass&)


Additionaly common misconception about references is mistaking the data type of an R value reference name and its value category. Ex:

class Myclass{};

void val(const Myclass&)
{
    std::cout << "value category - L value\n";
}

void val(Myclass&&)
{
    std::cout << "value category - R value\n";
}

int main()
{
	Myclass m;

    Myclass&& rref = std::move(m);

    val(rref);
}

Output
--------

value category - L value