INHERITANCE - General Features
--------------------------------------

Inside a derived class object, there is actually a base class object. This can be seen in the assembly code generated by the compiler and examined by using the sizeof operand.
sizeof(Base) <---> sizeof(Derived)

The base class to be inherited from, must be a complete type.

In a derived class, writing a "using declaration" for member functions or data members of the base class can have two purposes:

1) Incorporating the member functions or data members of the base class into the public interface of the derived class

2) Forming a function overloading mechanism between base class functions and derived class functions


Special member functions work similarly to compostion. For all implicitly declared - defaulted special functions written by the compiler in the derived
class functions, their base class counterparts are called (like derived class default ctor --> Base class default ctor). However, in the derived class
if a member function is written by the programmer, calling its base class counterparts(ctors, assignment operators or dtor) in the derived class member
function will be programmer's responsibility. Example:

class Base
{
public:

	Base() { cout << "Base()\n"; }

	Base(int, int) { cout << "Base(int, int)\n"; }

	Base(const Base& rhs)
	{
		cout << "Base(const Base& rhs)\n";
	}

	Base(Base&& rhs) noexcept
	{
		cout << "Base(Base&& rhs)\n";
	}

	Base& operator=(const Base& rhs)
	{
		cout << "Base& operator=(const Base& rhs)\n";
		return *this;
	}

	Base& operator=(Base&& rhs) noexcept
	{
		cout << "Base& operator=(Base&& rhs)\n";
		return *this;
	}

	void foo(int x)
	{
		cout << "Base::foo(int x)\n";
	}
};

class Der : public Base
{
public:

	Der() { cout << "Der()\n"; }

	Der(int x, int y) : Base(x, y)
	{
		cout << "Der(int, int)\n";
	}

	Der(const Der& rhs) : Base (rhs)
	{

		cout << "Der(const Der& rhs)\n";
	}

	Der(Der&& rhs) noexcept : Base (std::move(rhs))
	{
		cout << "Der(Der&& rhs)\n";
	}


	Der& operator=(const Der& rhs) 
	{
		Base::operator=(rhs);
		cout << "Der& operator=(const Der& rhs)\n";
		return *this;

	}

	Der& operator=(Der&& rhs) noexcept
	{
		Base::operator=(std::move(rhs));
		cout << "Der& operator=(Der&& rhs)\n";
		return *this;
	}

};

// test code
int main()
{

	Der da;					// default ctor

	cout << "\n";

	Der db(3, 5);			// (int, int) ctor

	cout << "\n";

	Der dc = db;			// copy ctor

	cout << "\n";

	Der dd = std::move(da);	// move ctor

	cout << "\n";

	da = dd;				// copy assignment operator

	cout << "\n";

	db = std::move(dc);		// move assignment operator

	cout << "\n";

	db.Base::foo(5);		// calling Base class function through a derived object
}

INHERITANCE ÇEŞİTLERİ(Private Inheritance & Protected Inheritance)
-------------------------------------------------------------------

Public inheritance bir "is-a" ilişkisi sağlar, yani türemiş sınıf türünden taban sınıf türüne(pointer veya referans) bir örtülü dönüşüm(upcasting) yok.
Taban sınıfın public arayüzü türemiş sınıfın public arayüzüne, taban sınıfın protected arayüzü türemiş sınıfın protected arayüzüne eklenir. Taban sınıfın
private bölümüne erişim yoktur. C++'ta görülen diğer inheritance çeşitlerinde ise durum farklıdır. Taban sınıfın private bölümü bütün kalıtım biçimlerinde
türemiş sınıfa kapalıdır.

PRIVATE INHERITANCE
--------------------

1)Public inheritance'ta, taban sınıfın arayüzleri aynı şekilde türemiş sınıfa eklenir:

	base public 		--> 	derived public
	base protected 		--> 	derived protected
	
Private inhertiance'ta ise:
	
	base public 		--> 	derived private
	
Bunun anlamı(private inheritance): Türemiş sınıf içinde taban sınıfın yine protected ve public bölümüne erişilebilir. Ancak artık client kodlar türemiş 
sınıf üzerinden taban sınıfın kodlarını kullanamazlar.

2)Bir is-a relationship yok. Türemiş sınıftan taban sınıfa örtülü dönüşüm yok. Upcasting, iki istisna dışında sentaks hatası :

a)Türemiş sınıfın üye fonksiyonu içinde upcasting (örtülü olarak) geçerli
b)Türemiş sınıfın friend'lik verdiği fonksiyonlarda geçerli

class Base
{
public:
	void foo();
};

class Der : private Base
{
	void bar()
	{
		Der myder;

		Base* bptr = &myder; // geçerli
		Base& bref = myder; // geçerli
	}

	friend void func();
	
};

void func()
{
	Der myder;

	Base* bptr = &myder; // geçerli
	Base& bref = myder; // geçerli
}

int main()
{
	Der myder;

	Base* bptr = &myder; // geçersiz
	Base& bref = myder; // geçersiz
}


3)Private kalıtmı composition(containment, yani bir sınıf türünden elemana sahip olması)'a bir alternatif. İkisi arasındaki farklar:

a)Elemanımız olan sınıfın protected bölümüne erişemeyiz. Ancak private kalıtımda taban sınıfımızın protected bölümüne erişebilriz.
b)Elemenımızın sanal fonksiyonu (doğrudan)override edemeyiz. Ancak private kalıtımda taban sınıfımızın sanal fonksiyonu override edebiliriz.
c)Elemeanımızın türüne sınıf türünden dönüşüm yok. Ancak private kalıtımda sınırlı da olsa türemiş sınıftan taban sınıfa dönüşüm var(2. madde).

Private kalıtımda mümkün ama composition'da mümkün olmayan örnekler:
- Bir sınıfın başka bir sınıf türünden iki tane elemanı olabilir.
- Bir sınıfın başka bir sınıf türünden dizi elemanı olabilir.

Private kalıtımında:
a)Gloabal fonksiyonlarda upcasting geçerli değil.
b)Türemiş sınıfın üye fonksiyonları içinde geçerli.
c)Türemiş fonksiyonun friend'lik verdiği kodlar içinde geçerli.

EBO(Empty Base Optimization)
-------------------------------
Boş bir sınıfın bellekte kapladığı alan 1 byte'tır. Eğer böyle bir sınıf type member olarak başka bir sınıfın içinde yer alırsa, alignment nedeniyle
derleyici tarafından padding yapılabilir(ör:1 yerine 4 byte'lık yer kaplayabilir). Bu nedenden bu sınıftan kalıtım yapılması tercih edilir.

Neden Boş sınıf oluşturulur?
a)Sınıfın elemana sahip olmaması, bir interface'inin olmayacağı anlamına gelmiyor.
b)Böyle sınıflar bazı tekniklerle overload resolution oluşturmak için kullanılır.
c)Generic programlama paradigmasında empty class'lar yığun olarak kullanılır.

Private inhertance'ın Herb Sutter tarafından kullanılan ilginç bir kullanım senaryosu daha var. Bu senaryoya "restricted polymorphism" de deniyor.
Taban sınıftaki sanal fonksiyonun, virtual dispatch mekanizmasından sadece belirli fonksiyonların istifade etmesini sağlamak için kullanılır. 

class Base
{
public:
	virtual void vfunc();
};

class Der:private Base
{
public:
	void vfunc() override;
	friend void g1();
};

void foo(Base& r)
{
	r.vfunc();
}

void g1()
{
	Der1 myder;
	foo1(myder); // geçerli, friend func
}

void g2()
{
	Der1 myder;
	//foo1(myder); // geçersiz
}


PROTECTED INHERITANCE
------------------------

Private kalıtımı ile protected kalıtımı arasındaki en büyük fark:

	base public 		--> 	derived protected

Bu durumda multi-level inheritance ile türetilen sınıflar bu öğelere erişebilir.


Konuyla ilgili Diğer Kavramlar(Multiple Inheritance & Virtual Inheritance)



MULTIPLE INHERTIANCE
-----------------------

class BaseX { int x;}
class BaseY { int y;}

class Der : public BaseX, BaseY {}

Bunun anlamı class Der : public BaseX, private BaseY ile aynıdır. Der nesnesinin iki ayrı taban sınıfı var. Yani sizeof(Der) bu drummda 8 olacaktır.

Taban sınıflar kalıtım sentaksında bildirimdeki sıra ile hayata gelir(ctor init listteki sıra ile değil, member'larda olduğu gibi)

class Der : public BaseX, public BaseY // Bu sıra ile hayata gelir
{
	Der(): BaseY(), BaseX
}

İsim arama bütün sınıflarda(türemiş ve taban sınıflar) aynı anda yapılır, dolayısıyla function overloading olmaz(zaten scope'lar da farklı).
Burada ambiguity'i engellemenin yolu: static_cast operatörü ya da nitelenmiş isim kullanmaktır. Ör:

class BaseX
{
public:
	void foo();
};

class BaseY
{
public:
	int foo(int, int);
};

class Der : public BaseX, public BaseY
{

};

int main()
{
	Der myder;

	myder.BaseX::foo();
	myder.BaseY::foo(1, 2);

	static_cast<BaseX&>(myder).foo();
	static_cast<BaseY&>(myder).foo(1, 2);
}

Eğer function overloading mekanizmasının çalışması isteniyorsa türemiş sınıf içinde iki taban sınıf için de using bildirimi yapılabilir:

class BaseX
{
public:
	void foo();
};

class BaseY
{
public:
	int foo(int, int);
};

class Der : public BaseX, public BaseY
{
public:
	using BaseX::foo;
	using BaseY::foo;
};

int main()
{
	Der myder;

	myder.foo();
	myder.foo(5,6);
}

VIRTUAL INHERITANCE
---------------------

Diamond(karo) formdaki hiyerarşide çıkan, türemiş sınıf türünden bir nesne(MathTeacher) tanımlandığında taban sınıf 
nesnesinin(Person) iki kere hayata gelmesi problemini(ambiguity) çözmeye yönelik bir araçtır. Sentaksı:

class Person{};
class Worker: virtual public Person{};
class Teacher: virtual public Person{ };
class MathTeacher: public Teacher, public Worker{ };


Eğer virtual inheritance kullanılarak türetilen sınıf  çoklu kalıtımda başka bir sınıfla birlikte taban sınıf olacaksa, bu kendi taban 
sınıfından bir tane koyulmasını sağlayacak. Bu sentaksta iki taban sınıfın da(Worker, Teacher) virtual inheritance youlya elde edilmesi gerek,
aksi takdirde virtual inheritance mekanizması devreye girmeyecektir. Burada ortak taban sınıfa(Person) virtual base class denir. 
Virtual base class, kendisinden türemiş sınıflarının hepsinin ctor'ları tarafından initialize edilmek zorundadır.

class Base // virtual base class
{
public:
	Base(const char*) {}
};

class DerX: virtual public Base1
{
public:
	DerX() : Base("DerX\n") {}

};

class DerY: virtual public Base1
{
public:
	DerY() : Base("DerY\n") {}

};

class DerZ: public DerX, public DerY
{
public:
	DerZ(): Base("DerZ\n") {}

};

class DerA : public DerZ
{
public:
	DerA() : Base("DerZ\n") {}
};


