UPCASTING AND DOWNCASTING
---------------------------
Upcasting
----------
Upcasting is converting a derived-class reference/pointer, to a base-class reference/pointer. It is always allowed for public inheritance without an explicit type cast. This is a result of is-a relationship between the base and derived classes. Ex:

Derived d;
Base* b = &d; 

Upcasting allows us to treat a derived class as if it is its own base class. That's how we decouple ourselves from knowing about the exact type that we are dealing with. Ex:

void fun(Base* bp)
{
	bp->foo();
}

int main()
{
	Derived d;
	fun(&d); // function call at runtime
}

Upcasting can cause object slicing when a derived class object is passed by value as a base class object, as in foo(Base derived_obj).

Since implicit upcasting makes it possible for a base-class pointer/reference to refer to a both base-class object and derived-class object, the need for dynamic binding arises.
That's why we have virtual member functions(explained below).

Pointer/Reference 	: known at compile time.
Object type			: not known until run time.

Downcasting
------------
The opposite process, converting a base-class pointer (reference) to a derived-class pointer (reference) is called downcasting. Downcasting is not allowed without an explicit type
cast. The reason for this restriction is that the is-a relationship is not, in most of the cases, symmetric. A derived class could add new data members, and the class member functions
that used these data members wouldn't apply to the base class.

Object Slicing
--------------
When a derived class object is passed by value as a base class object, as in foo(Base derived_obj), the base class copy constructor is called. So, the specific behaviors of a derived
class object are sliced off. We're left with a base class object. In other words, if we upcast to an object instead of a pointer or reference, the objectis sliced. As a result, all
that remains is the subobject that corresponds to the destination type of our cast.

Derived d;
Base b = d;

RUN-TIME POLYMORPHISM
*----------------------*

In C++, base class' member functions are divided into three categories when it comes to inheritance:

1) Functions that give derived class both an interface and an implementation (which they cannot modify)

2) Functions that give derived class both an interface and an implementation by default(which they can modify). These functions are called virtual
functions.

3) Functions that give derived class an interface but not an implementation. These functions are called pure virtual functions.

class Airplane
{
	 void takeoff(); 			// (1)
	 virtual void land(); 		// (2)
	 virtual void fly() = 0; 	// (3)
}

class Airbus : public Airplane
{
}

Polymorphic class: If a class has at least one virtual function, it's called polymorphic class

Abstract class: If a class has a pure virtual function it's an abstract class. An object of type abstract class cannot be constructed, but a reference or pointer to abstract class 
can. If a derived class of an abstract base class, doesn't override all of the virtual functions of its base class then it also will be an abstract class. If a class is not abstract, 
then it's called as concrete class.

In order to override a virtual function of a base class, derived class must implement a function with the same return type and signature. If derived class declares a function with 
the same name and parameters with base class but with a diferrent return type then this situation causes a syntax error. If paramaters are different, this doesn't override the base
virtual function.

class Base
{
public:
	virtual int foo(int, int);
};

class Der : public Base
{
public:

	//double foo(int, int); 	// syntax error, there is a way to make this legal --> covariance
	int foo(char, int); 		// valid but doesn't override
	int foo(int, int) const; 	// const is the part of signature so doesn't override
};

covariance (All has the same meaning)
variant return types
covariant
--------------------

-When overriding virtual function of a base class, it is possible to use a different return type(usual case is syntax error) if condition is met:

D and B being a class type and D is derived from B; if a base class' virtual function's return type is B* or B& then derived class' overrider
function can have return type of D* or D&.

class B {};
class D: public B{};

class Base
{
public:
	virtual B* foo();
};

class Der: public Base
{
public:
	D* foo() override;
};

In that case, by getting benefit of covariance, in our Car class(car.h), clone function's return type can be changed from Car* to <Derived Class Type*>
and this will provide correct type in  compile time.

VIRTUAL DISPATCH MECHANISM
*--------------------------*

When a virtual function is called via

a) Reference or
b) Pointer to base class

which function to be called is decided at run time rather than compile time ---> late-binding(dydnamic binding).

Virtual dispatch is the process of selecting which implementation of a virtual function to call at run time. Its main features:

1) Virtual functions can be placed in public, protected and private sections of base class and can be orverriden also in each section of derived class.
As long as they are called via pointer/reference to base class type, virtual dispatch mechanism will be on action. Referring to code in cpp file:
void car_game(Car* p){ p->test_car();}

2) Name lookup, context control and access control are related to static checks. These are done in compile-time.
Default arguments of function parameters are also evaluated in compile-time, therefore the parameter will take base class virtual funciton's argument.

3) There are cases when virtual dispatch mechanism doesn't get activated:

    a) In object slicing(initializing a base class object with a derived class object)
	
    b) For virtual function calls that are made inside base class ctors, becuase if otherwise, base class would try to use the members/resources of an
object(of type derived class) that has not yet been constructed. Note that construction starts from base class and continues to derived classes in order.

    c) For virtual function calls that are made inside base class dtor, becuase if otherwise, base class would try to use the members/resources of a destroyed
object(of type derived class). Note that destruction is done in the reverse order of construction, first members/resources of derived class and then base class are destroyed.

    d) When a member is used with scope resolution operator in base class. For example: Base::a

4) Virtual dispatch mechanism has costs:

    a) For each polymorphic class a virtual function table is formed by compiler. It's the same table for all objects of this class and created during
runtime and employs dynamic storage, therefore allocating and freeing this memory will come with a considerable cost.

    b) Each polymorphic class object has a virtual pointer that points to its own virtual function table. You can check the size 
difference between a polymorphic class and a class that has no virtual funciton. Adding more than one virtual function won't change the class size.
Consequently, when virtual dispatch mechanism is active, accessing to an overridden function shall require double dereferencing.
Example: virtPtr->table[idx]

5) Each time when a derived class object is used, the base class object should be replaceable with it in terms of functionality on compile-time.
Opposite of this implementation is called improper inheritance. In some parts of code, due to virtual dispatch, which object to be used(base or derived class object)
will be decided during run-time, therefore improper inheritence may cause a run-time error. This rule corresponds to the "L" part of SOLID principles which stands
for Liskov Substition Principle(LSP). Its reminding motto - "Require no more, promise no less".

6) There is no virtual ctor in C++, instead there is virtual clone idiom that constructs the exact same derived class object. 
However, dtors can be virtual and almost every time it should be virtual.

7) In virtual dispatch mechanism, mostly objects with dynamic storage are used. They are typically managed and deleted via base class pointers.
The dynamic type of an object is mostly unknown for the programmer, it will be clear at run-time. If, in a function, delete operator is called for
Base class dtor, only Base class dtor is called even if the argument is pointer to Derived class object, so the programmer can suppose virtual dispatch
mechanism handled the deletion properly. But actually derived class object dtor never gets called. In order for derived types to call their own dtors at
run-time, dtors should be virtual.

8) Herb Sutter's advice: Dtor of a polymorphic base class should be either;

    a) Public virtual, or
    b) Protected non-virtual.
	
The issue this suggestion addresses is emergence of undefined behavior when the programmer tries to delete a derived object, which is initialized in heap,
via a base pointer that is upcasted.

First suggestion should be clear since it is obvious that in order to delete a derived class object via base class pointer, base class dtor slould be
accessible(public) at compile-time. Also it should be virtual so that derived object dtor could be called before base class dtor using virtual dispatch.

Second suggestion is based on preventing client codes to call base class destructor. If it is desired to prevent deleting a derived class object by the
destructor of a base class object, firstly there is no need for dtor of the base to be virtual. Next, if the dtor of the base class put in protected 
session, client codes cannot call delete operator for base class pointers, but can call for derived class pointers.

Ex1:

class Base
{
public:
	~Base(){cout << "~Base()\n";} // should be --> virtual ~Base(), now all the derived classes of this base class implicitly override this dtor
};

class Der : public Base
{
public:
	~Der(){cout << "Der dtor releasing some resources\n";}
};

void fdel(Base* bptr)
{
	delete bptr; 	// calls Base dtor, not Der dtor. delete operator takes its operand as static type. 
}				 	// undefined behaviour if the argument comes as Der*

int main()
{
	Der* derptr = new Der;
	fdel(derptr);
	
	Base* baseptr = new Der;
	delete baseptr;	// undefined behaviour
}

Ex2:

class Base
{
public:
	void del()
	{
		Base::~Base();
	}
protected:
	~Base(){cout << "~Base()\n";}
};

class Der : public Base
{
public:
	~Der(){cout << "Der dtor releasing some resources\n";}
};

void fdel(Base* bptr)
{
	bptr->del();
}

int main()
{
	Base* baseptr = new Der;
	Der* derptr = new Der;

	fdel(baseptr);
	delete derptr;
}

9) In C++ there are RTTI(Run-time Type Information) tools to determine the dynamic type of an object in run-time:

	a) dynamic_cast operator
	b) typeid operator

10) "Final" contextual keyword can be used by compilers to do devirtualization(an optimization about inferring which function will be called during compile-time, 
when virtual functions/classes are involved)

11) C++ is a hybrid language, it's not specifically object-oriented. In fact, its strength lies in generic programming paradigm.
There will be alternatives of different methodologies based on trade-offs.
